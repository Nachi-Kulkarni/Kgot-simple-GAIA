version: '3.8'

services:
  # === Alita Core Services ===
  
  # Alita Manager Agent - Orchestrates overall system operations
  alita-manager:
    build:
      context: ../..
      dockerfile: alita_core/manager_agent/Dockerfile
    container_name: alita-manager-agent
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=8000
    volumes:
      - ../../logs/alita:/app/logs
      - ../../config:/app/config:ro
    ports:
      - "8000:8000"
    depends_on:
      - neo4j
      - redis
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alita Web Agent - Handles web interactions and scraping
  alita-web:
    build:
      context: ../..
      dockerfile: alita_core/web_agent/Dockerfile
    container_name: alita-web-agent
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    volumes:
      - ../../logs/alita:/app/logs
      - ../../config:/app/config:ro
      - playwright-cache:/ms-playwright
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alita MCP Creation Service - Generates and manages MCPs
  alita-mcp:
    build:
      context: ../..
      dockerfile: alita_core/mcp_creation/Dockerfile
    container_name: alita-mcp-creation
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - ../../logs/alita:/app/logs
      - ../../config:/app/config:ro
      - mcp-storage:/app/mcp_storage
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === KGoT Core Services ===

  # KGoT Controller - Manages knowledge graph operations
  kgot-controller:
    build:
      context: ../..
      dockerfile: kgot_core/controller/Dockerfile
    container_name: kgot-controller
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../../logs/kgot:/app/logs
      - ../../config:/app/config:ro
    depends_on:
      - neo4j
      - redis
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # KGoT Graph Store - Manages graph data persistence
  kgot-graph-store:
    build:
      context: ../..
      dockerfile: kgot_core/graph_store/Dockerfile
    container_name: kgot-graph-store
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - RDF4J_URL=http://rdf4j:8080
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../../logs/kgot:/app/logs
      - ../../config:/app/config:ro
      - graph-data:/app/data
    depends_on:
      - neo4j
      - rdf4j
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # KGoT Integrated Tools - Tool execution and management
  kgot-tools:
    build:
      context: ../..
      dockerfile: kgot_core/integrated_tools/Dockerfile
    container_name: kgot-integrated-tools
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - PYTHON_EXECUTOR_URL=http://python-executor:5000
    volumes:
      - ../../logs/kgot:/app/logs
      - ../../config:/app/config:ro
      - tool-storage:/app/tools
    depends_on:
      - python-executor
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # === Database Services ===

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: neo4j-alita-kgot
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RDF4J Triplestore

  rdf4j:
    image: eclipse/rdf4j-workbench:latest
    container_name: rdf4j-alita-kgot
    environment:
      - JAVA_OPTS=-Xmx2g
    volumes:
      - rdf4j-data:/var/rdf4j
    ports:
      - "8080:8080"
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/rdf4j-server"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-alita-kgot
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # === Federation Services ===

  # Simple Federation Server - Local MCP federation for development
  federation-server:
    build:
      context: ../../federation
      dockerfile: Dockerfile
    container_name: federation-server
    environment:
      - SIMPLE_MCP_HOST=0.0.0.0
      - SIMPLE_MCP_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SIMPLE_MCP_SERVERS=${SIMPLE_MCP_SERVERS}
      - SEQUENTIAL_THINKING_MCP_ENDPOINT=${SEQUENTIAL_THINKING_MCP_ENDPOINT}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ../../logs/federation:/app/logs
      - federation-data:/app/data
    ports:
      - "8081:8080"
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Extension Services ===

  # Python Code Executor (from existing KGoT)
  python-executor:
    image: python:3.11-slim
    container_name: python-executor-alita-kgot
    command: ["sh", "-c", "python -m http.server 5000"]
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - python-workspace:/app/workspace
      - ../../logs/system:/app/logs
    ports:
      - "5001:5000"
    networks:
      - alita-kgot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Multimodal Processing Service
  multimodal-processor:
    build:
      context: ../..
      dockerfile: multimodal/Dockerfile
    container_name: multimodal-processor
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - ../../logs/multimodal:/app/logs
      - ../../config:/app/config:ro
      - multimodal-storage:/app/storage
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # Validation Service
  validation-service:
    build:
      context: ../..
      dockerfile: validation/Dockerfile
    container_name: validation-service
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../../logs/validation:/app/logs
      - ../../config:/app/config:ro
      - validation-results:/app/results
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # Optimization Service
  optimization-service:
    build:
      context: ../..
      dockerfile: optimization/Dockerfile
    container_name: optimization-service
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - ../../logs/optimization:/app/logs
      - ../../config:/app/config:ro
      - optimization-data:/app/data
    depends_on:
      - redis
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # === Monitoring and Management ===

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-alita-kgot
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../config/monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - alita-kgot-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-alita-kgot
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../../config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - alita-kgot-network
    restart: unless-stopped

# === Network Configuration ===
networks:
  alita-kgot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# === Volume Configuration ===
volumes:
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
  neo4j-import:
    driver: local
  neo4j-plugins:
    driver: local
  rdf4j-data:
    driver: local
  redis-data:
    driver: local
  graph-data:
    driver: local
  tool-storage:
    driver: local
  mcp-storage:
    driver: local
  python-workspace:
    driver: local
  multimodal-storage:
    driver: local
  validation-results:
    driver: local
  optimization-data:
    driver: local
  federation-data:
    driver: local
  playwright-cache:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local